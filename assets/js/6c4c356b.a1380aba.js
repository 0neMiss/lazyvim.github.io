"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[8132],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>b});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),i=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=i(e.components);return a.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=i(n),m=r,b=p["".concat(u,".").concat(m)]||p[m]||d[m]||l;return n?a.createElement(b,s(s({ref:t},c),{},{components:n})):a.createElement(b,s({ref:t},c))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,s=new Array(l);s[0]=m;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[p]="string"==typeof e?e:r,s[1]=o;for(var i=2;i<l;i++)s[i]=n[i];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(7294),r=n(6010);const l="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,s),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>T});var a=n(7462),r=n(7294),l=n(6010),s=n(2466),o=n(6550),u=n(1980),i=n(7392),c=n(12);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,i.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function b(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=d(e),[s,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[u,i]=b({queryString:n,groupId:a}),[p,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),v=(()=>{const e=u??p;return m({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{v&&o(v)}),[v]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),i(e),f(e)}),[i,f,l]),tabValues:l}}var v=n(2389);const g="tabList__CuJ",h="tabItem_LNqP";function y(e){let{className:t,block:n,selectedValue:o,selectValue:u,tabValues:i}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,s.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),a=i[n].value;a!==o&&(p(t),u(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},i.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:d},s,{className:(0,l.Z)("tabs__item",h,s?.className,{"tabs__item--active":o===t})}),n??t)})))}function k(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function _(e){const t=f(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",g)},r.createElement(y,(0,a.Z)({},e,t)),r.createElement(k,(0,a.Z)({},e,t)))}function T(e){const t=(0,v.Z)();return r.createElement(_,(0,a.Z)({key:String(t)},e))}},4992:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(7462),r=(n(7294),n(3905)),l=n(4866),s=n(5162);const o={},u="lang.rust",i={unversionedId:"plugins/extras/lang.rust",id:"plugins/extras/lang.rust",title:"lang.rust",description:"To use this, add it to your lazy.nvim imports:",source:"@site/docs/plugins/extras/lang.rust.md",sourceDirName:"plugins/extras",slug:"/plugins/extras/lang.rust",permalink:"/plugins/extras/lang.rust",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/master/docs/plugins/extras/lang.rust.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Ruby",permalink:"/plugins/extras/lang.ruby"},next:{title:"Tailwind CSS",permalink:"/plugins/extras/lang.tailwind"}},c={},p=[{value:"nvim-cmp",id:"nvim-cmp",level:2},{value:"crates.nvim",id:"cratesnvim",level:2},{value:"nvim-treesitter",id:"nvim-treesitter",level:2},{value:"mason.nvim",id:"masonnvim",level:2},{value:"rust-tools.nvim",id:"rust-toolsnvim",level:2},{value:"nvim-lspconfig",id:"nvim-lspconfig",level:2},{value:"rust-tools.nvim",id:"rust-toolsnvim-1",level:2},{value:"neotest",id:"neotest",level:2},{value:"neotest-rust",id:"neotest-rust",level:2}],d={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"langrust"},(0,r.kt)("inlineCode",{parentName:"h1"},"lang.rust")),(0,r.kt)("p",null,"To use this, add it to your ",(0,r.kt)("strong",{parentName:"p"},"lazy.nvim")," imports:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="lua/config/lazy.lua" {4}',title:'"lua/config/lazy.lua"',"{4}":!0},'require("lazy").setup({\n  spec = {\n    { "LazyVim/LazyVim", import = "lazyvim.plugins" },\n    { import = "lazyvim.plugins.extras.lang.rust" },\n    { import = "plugins" },\n  },\n})\n')),(0,r.kt)("h2",{id:"nvim-cmp"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/hrsh7th/nvim-cmp"},"nvim-cmp")),(0,r.kt)("p",null," Extend auto completion"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function(_, opts)\n  local cmp = require("cmp")\n  opts.sources = cmp.config.sources(vim.list_extend(opts.sources, {\n    { name = "crates" },\n  }))\nend\n'))),(0,r.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "hrsh7th/nvim-cmp",\n  dependencies = {\n    {\n      "Saecki/crates.nvim",\n      event = { "BufRead Cargo.toml" },\n      config = true,\n    },\n  },\n  ---@param opts cmp.ConfigSchema\n  opts = function(_, opts)\n    local cmp = require("cmp")\n    opts.sources = cmp.config.sources(vim.list_extend(opts.sources, {\n      { name = "crates" },\n    }))\n  end,\n}\n')))),(0,r.kt)("h2",{id:"cratesnvim"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/Saecki/crates.nvim"},"crates.nvim")),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"opts = {}\n"))),(0,r.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "Saecki/crates.nvim",\n  event = { "BufRead Cargo.toml" },\n  config = true,\n}\n')))),(0,r.kt)("h2",{id:"nvim-treesitter"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/nvim-treesitter/nvim-treesitter"},"nvim-treesitter")),(0,r.kt)("p",null," Add Rust & related to treesitter"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function(_, opts)\n  if type(opts.ensure_installed) == "table" then\n    vim.list_extend(opts.ensure_installed, { "ron", "rust", "toml" })\n  end\nend\n'))),(0,r.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "nvim-treesitter/nvim-treesitter",\n  opts = function(_, opts)\n    if type(opts.ensure_installed) == "table" then\n      vim.list_extend(opts.ensure_installed, { "ron", "rust", "toml" })\n    end\n  end,\n}\n')))),(0,r.kt)("h2",{id:"masonnvim"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/williamboman/mason.nvim"},"mason.nvim")),(0,r.kt)("p",null," Ensure Rust debugger is installed"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function(_, opts)\n  if type(opts.ensure_installed) == "table" then\n    vim.list_extend(opts.ensure_installed, { "codelldb" })\n  end\nend\n'))),(0,r.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "williamboman/mason.nvim",\n  opts = function(_, opts)\n    if type(opts.ensure_installed) == "table" then\n      vim.list_extend(opts.ensure_installed, { "codelldb" })\n    end\n  end,\n}\n')))),(0,r.kt)("h2",{id:"rust-toolsnvim"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/simrat39/rust-tools.nvim"},"rust-tools.nvim")),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function()\n  local ok, mason_registry = pcall(require, "mason-registry")\n  local adapter ---@type any\n  if ok then\n    -- rust tools configuration for debugging support\n    local codelldb = mason_registry.get_package("codelldb")\n    local extension_path = codelldb:get_install_path() .. "/extension/"\n    local codelldb_path = extension_path .. "adapter/codelldb"\n    local liblldb_path = vim.fn.has("mac") == 1 and extension_path .. "lldb/lib/liblldb.dylib"\n      or extension_path .. "lldb/lib/liblldb.so"\n    adapter = require("rust-tools.dap").get_codelldb_adapter(codelldb_path, liblldb_path)\n  end\n  return {\n    dap = {\n      adapter = adapter,\n    },\n    tools = {\n      on_initialized = function()\n        vim.cmd([[\n              augroup RustLSP\n                autocmd CursorHold                      *.rs silent! lua vim.lsp.buf.document_highlight()\n                autocmd CursorMoved,InsertEnter         *.rs silent! lua vim.lsp.buf.clear_references()\n                autocmd BufEnter,CursorHold,InsertLeave *.rs silent! lua vim.lsp.codelens.refresh()\n              augroup END\n            ]])\n      end,\n    },\n  }\nend\n'))),(0,r.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "simrat39/rust-tools.nvim",\n  lazy = true,\n  opts = function()\n    local ok, mason_registry = pcall(require, "mason-registry")\n    local adapter ---@type any\n    if ok then\n      -- rust tools configuration for debugging support\n      local codelldb = mason_registry.get_package("codelldb")\n      local extension_path = codelldb:get_install_path() .. "/extension/"\n      local codelldb_path = extension_path .. "adapter/codelldb"\n      local liblldb_path = vim.fn.has("mac") == 1 and extension_path .. "lldb/lib/liblldb.dylib"\n        or extension_path .. "lldb/lib/liblldb.so"\n      adapter = require("rust-tools.dap").get_codelldb_adapter(codelldb_path, liblldb_path)\n    end\n    return {\n      dap = {\n        adapter = adapter,\n      },\n      tools = {\n        on_initialized = function()\n          vim.cmd([[\n                augroup RustLSP\n                  autocmd CursorHold                      *.rs silent! lua vim.lsp.buf.document_highlight()\n                  autocmd CursorMoved,InsertEnter         *.rs silent! lua vim.lsp.buf.clear_references()\n                  autocmd BufEnter,CursorHold,InsertLeave *.rs silent! lua vim.lsp.codelens.refresh()\n                augroup END\n              ]])\n        end,\n      },\n    }\n  end,\n  config = function() end,\n}\n')))),(0,r.kt)("h2",{id:"nvim-lspconfig"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/neovim/nvim-lspconfig"},"nvim-lspconfig")),(0,r.kt)("p",null," Correctly setup lspconfig for Rust \ud83d\ude80"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  servers = {\n    -- Ensure mason installs the server\n    rust_analyzer = {\n      keys = {\n        { "K", "<cmd>RustHoverActions<cr>", desc = "Hover Actions (Rust)" },\n        { "<leader>cR", "<cmd>RustCodeAction<cr>", desc = "Code Action (Rust)" },\n        { "<leader>dr", "<cmd>RustDebuggables<cr>", desc = "Run Debuggables (Rust)" },\n      },\n      settings = {\n        ["rust-analyzer"] = {\n          cargo = {\n            allFeatures = true,\n            loadOutDirsFromCheck = true,\n            runBuildScripts = true,\n          },\n          -- Add clippy lints for Rust.\n          checkOnSave = {\n            allFeatures = true,\n            command = "clippy",\n            extraArgs = { "--no-deps" },\n          },\n          procMacro = {\n            enable = true,\n            ignored = {\n              ["async-trait"] = { "async_trait" },\n              ["napi-derive"] = { "napi" },\n              ["async-recursion"] = { "async_recursion" },\n            },\n          },\n        },\n      },\n    },\n    taplo = {},\n  },\n  setup = {\n    rust_analyzer = function(_, opts)\n      require("lazyvim.util").on_attach(function(client, buffer)\n        -- stylua: ignore\n        if client.name == "rust_analyzer" then\n          vim.keymap.set("n", "K", "<cmd>RustHoverActions<cr>", { buffer = buffer, desc = "Hover Actions (Rust)" })\n          vim.keymap.set( "n", "<leader>cR", "<cmd>RustCodeAction<cr>", { buffer = buffer, desc = "Code Action (Rust)" })\n          vim.keymap.set( "n", "<leader>dr", "<cmd>RustDebuggables<cr>", { buffer = buffer, desc = "Run Debuggables (Rust)" })\n        end\n      end)\n      local rust_tools_opts = require("lazyvim.util").opts("rust-tools.nvim")\n      require("rust-tools").setup(vim.tbl_deep_extend("force", rust_tools_opts or {}, { server = opts }))\n      return true\n    end,\n    taplo = function(_, _)\n      local function show_documentation()\n        if vim.fn.expand("%:t") == "Cargo.toml" and require("crates").popup_available() then\n          require("crates").show_popup()\n        else\n          vim.lsp.buf.hover()\n        end\n      end\n      require("lazyvim.util").on_attach(function(client, buffer)\n        if client.name == "taplo" then\n          vim.keymap.set("n", "K", show_documentation, { buffer = buffer, desc = "Show Crate Documentation" })\n        end\n      end)\n      return false -- make sure the base implementation calls taplo.setup\n    end,\n  },\n}\n'))),(0,r.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "neovim/nvim-lspconfig",\n  dependencies = {\n    "simrat39/rust-tools.nvim",\n    -- Avoid calling setup twice if user supplies `opts`\n    config = function() end,\n  },\n  opts = {\n    servers = {\n      -- Ensure mason installs the server\n      rust_analyzer = {\n        keys = {\n          { "K", "<cmd>RustHoverActions<cr>", desc = "Hover Actions (Rust)" },\n          { "<leader>cR", "<cmd>RustCodeAction<cr>", desc = "Code Action (Rust)" },\n          { "<leader>dr", "<cmd>RustDebuggables<cr>", desc = "Run Debuggables (Rust)" },\n        },\n        settings = {\n          ["rust-analyzer"] = {\n            cargo = {\n              allFeatures = true,\n              loadOutDirsFromCheck = true,\n              runBuildScripts = true,\n            },\n            -- Add clippy lints for Rust.\n            checkOnSave = {\n              allFeatures = true,\n              command = "clippy",\n              extraArgs = { "--no-deps" },\n            },\n            procMacro = {\n              enable = true,\n              ignored = {\n                ["async-trait"] = { "async_trait" },\n                ["napi-derive"] = { "napi" },\n                ["async-recursion"] = { "async_recursion" },\n              },\n            },\n          },\n        },\n      },\n      taplo = {},\n    },\n    setup = {\n      rust_analyzer = function(_, opts)\n        require("lazyvim.util").on_attach(function(client, buffer)\n          -- stylua: ignore\n          if client.name == "rust_analyzer" then\n            vim.keymap.set("n", "K", "<cmd>RustHoverActions<cr>", { buffer = buffer, desc = "Hover Actions (Rust)" })\n            vim.keymap.set( "n", "<leader>cR", "<cmd>RustCodeAction<cr>", { buffer = buffer, desc = "Code Action (Rust)" })\n            vim.keymap.set( "n", "<leader>dr", "<cmd>RustDebuggables<cr>", { buffer = buffer, desc = "Run Debuggables (Rust)" })\n          end\n        end)\n        local rust_tools_opts = require("lazyvim.util").opts("rust-tools.nvim")\n        require("rust-tools").setup(vim.tbl_deep_extend("force", rust_tools_opts or {}, { server = opts }))\n        return true\n      end,\n      taplo = function(_, _)\n        local function show_documentation()\n          if vim.fn.expand("%:t") == "Cargo.toml" and require("crates").popup_available() then\n            require("crates").show_popup()\n          else\n            vim.lsp.buf.hover()\n          end\n        end\n        require("lazyvim.util").on_attach(function(client, buffer)\n          if client.name == "taplo" then\n            vim.keymap.set("n", "K", show_documentation, { buffer = buffer, desc = "Show Crate Documentation" })\n          end\n        end)\n        return false -- make sure the base implementation calls taplo.setup\n      end,\n    },\n  },\n}\n')))),(0,r.kt)("h2",{id:"rust-toolsnvim-1"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/simrat39/rust-tools.nvim"},"rust-tools.nvim")),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"opts = {}\n"))),(0,r.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "simrat39/rust-tools.nvim",\n  -- Avoid calling setup twice if user supplies `opts`\n  config = function() end,\n}\n')))),(0,r.kt)("h2",{id:"neotest"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/nvim-neotest/neotest"},"neotest")),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  adapters = {\n    ["neotest-rust"] = {},\n  },\n}\n'))),(0,r.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "nvim-neotest/neotest",\n  optional = true,\n  dependencies = {\n    "rouge8/neotest-rust",\n  },\n  opts = {\n    adapters = {\n      ["neotest-rust"] = {},\n    },\n  },\n}\n')))),(0,r.kt)("h2",{id:"neotest-rust"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/rouge8/neotest-rust"},"neotest-rust")),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"opts = nil\n"))),(0,r.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "rouge8/neotest-rust",\n}\n')))))}m.isMDXComponent=!0}}]);