"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[8132],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),i=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=i(e.components);return r.createElement(u.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=i(t),d=a,f=p["".concat(u,".").concat(d)]||p[d]||m[d]||l;return t?r.createElement(f,s(s({ref:n},c),{},{components:t})):r.createElement(f,s({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,s=new Array(l);s[0]=d;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o[p]="string"==typeof e?e:a,s[1]=o;for(var i=2;i<l;i++)s[i]=t[i];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(7294),a=t(6010);const l="tabItem_Ymn6";function s(e){let{children:n,hidden:t,className:s}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(l,s),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>x});var r=t(7462),a=t(7294),l=t(6010),s=t(2466),o=t(6550),u=t(1980),i=t(7392),c=t(12);function p(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}}))}function m(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??p(t);return function(e){const n=(0,i.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function d(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const r=(0,o.k6)(),l=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,u._X)(l),(0,a.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(r.location.search);n.set(l,e),r.replace({...r.location,search:n.toString()})}),[l,r])]}function b(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,l=m(e),[s,o]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!d({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:l}))),[u,i]=f({queryString:t,groupId:r}),[p,b]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,l]=(0,c.Nk)(t);return[r,(0,a.useCallback)((e=>{t&&l.set(e)}),[t,l])]}({groupId:r}),v=(()=>{const e=u??p;return d({value:e,tabValues:l})?e:null})();(0,a.useLayoutEffect)((()=>{v&&o(v)}),[v]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!d({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),i(e),b(e)}),[i,b,l]),tabValues:l}}var v=t(2389);const g="tabList__CuJ",h="tabItem_LNqP";function y(e){let{className:n,block:t,selectedValue:o,selectValue:u,tabValues:i}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,s.o5)(),m=e=>{const n=e.currentTarget,t=c.indexOf(n),r=i[t].value;r!==o&&(p(n),u(r))},d=e=>{let n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":t},n)},i.map((e=>{let{value:n,label:t,attributes:s}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,key:n,ref:e=>c.push(e),onKeyDown:d,onClick:m},s,{className:(0,l.Z)("tabs__item",h,s?.className,{"tabs__item--active":o===n})}),t??n)})))}function k(e){let{lazy:n,children:t,selectedValue:r}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},l.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r}))))}function _(e){const n=b(e);return a.createElement("div",{className:(0,l.Z)("tabs-container",g)},a.createElement(y,(0,r.Z)({},e,n)),a.createElement(k,(0,r.Z)({},e,n)))}function x(e){const n=(0,v.Z)();return a.createElement(_,(0,r.Z)({key:String(n)},e))}},4992:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=t(7462),a=(t(7294),t(3905)),l=t(4866),s=t(5162);const o={},u="lang.rust",i={unversionedId:"plugins/extras/lang.rust",id:"plugins/extras/lang.rust",title:"lang.rust",description:"To use this, add it to your lazy.nvim imports:",source:"@site/docs/plugins/extras/lang.rust.md",sourceDirName:"plugins/extras",slug:"/plugins/extras/lang.rust",permalink:"/plugins/extras/lang.rust",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/master/docs/plugins/extras/lang.rust.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Ruby",permalink:"/plugins/extras/lang.ruby"},next:{title:"Tailwind CSS",permalink:"/plugins/extras/lang.tailwind"}},c={},p=[{value:"nvim-cmp",id:"nvim-cmp",level:2},{value:"crates.nvim",id:"cratesnvim",level:2},{value:"nvim-treesitter",id:"nvim-treesitter",level:2},{value:"mason.nvim",id:"masonnvim",level:2},{value:"nvim-lspconfig",id:"nvim-lspconfig",level:2},{value:"rust-tools.nvim",id:"rust-toolsnvim",level:2}],m={toc:p};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"langrust"},(0,a.kt)("inlineCode",{parentName:"h1"},"lang.rust")),(0,a.kt)("p",null,"To use this, add it to your ",(0,a.kt)("strong",{parentName:"p"},"lazy.nvim")," imports:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="lua/config/lazy.lua" {4}',title:'"lua/config/lazy.lua"',"{4}":!0},'require("lazy").setup({\n  spec = {\n    { "LazyVim/LazyVim", import = "lazyvim.plugins" },\n    { import = "lazyvim.plugins.extras.lang.rust" },\n    { import = "plugins" },\n  },\n})\n')),(0,a.kt)("h2",{id:"nvim-cmp"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/hrsh7th/nvim-cmp"},"nvim-cmp")),(0,a.kt)("p",null," Extend auto completion"),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function(_, opts)\n  local cmp = require("cmp")\n  opts.sources = cmp.config.sources(vim.list_extend(opts.sources, {\n    { name = "crates" },\n  }))\nend\n'))),(0,a.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "hrsh7th/nvim-cmp",\n  dependencies = {\n    {\n      "Saecki/crates.nvim",\n      event = { "BufRead Cargo.toml" },\n      config = true,\n    },\n  },\n  ---@param opts cmp.ConfigSchema\n  opts = function(_, opts)\n    local cmp = require("cmp")\n    opts.sources = cmp.config.sources(vim.list_extend(opts.sources, {\n      { name = "crates" },\n    }))\n  end,\n}\n')))),(0,a.kt)("h2",{id:"cratesnvim"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/Saecki/crates.nvim"},"crates.nvim")),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"opts = {}\n"))),(0,a.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "Saecki/crates.nvim",\n  event = { "BufRead Cargo.toml" },\n  config = true,\n}\n')))),(0,a.kt)("h2",{id:"nvim-treesitter"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/nvim-treesitter/nvim-treesitter"},"nvim-treesitter")),(0,a.kt)("p",null," Add Rust & related to treesitter"),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function(_, opts)\n  if type(opts.ensure_installed) == "table" then\n    vim.list_extend(opts.ensure_installed, { "ron", "rust", "toml" })\n  end\nend\n'))),(0,a.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "nvim-treesitter/nvim-treesitter",\n  opts = function(_, opts)\n    if type(opts.ensure_installed) == "table" then\n      vim.list_extend(opts.ensure_installed, { "ron", "rust", "toml" })\n    end\n  end,\n}\n')))),(0,a.kt)("h2",{id:"masonnvim"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/williamboman/mason.nvim"},"mason.nvim")),(0,a.kt)("p",null," Ensure Rust debugger is installed"),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function(_, opts)\n  if type(opts.ensure_installed) == "table" then\n    vim.list_extend(opts.ensure_installed, { "codelldb" })\n  end\nend\n'))),(0,a.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "williamboman/mason.nvim",\n  opts = function(_, opts)\n    if type(opts.ensure_installed) == "table" then\n      vim.list_extend(opts.ensure_installed, { "codelldb" })\n    end\n  end,\n}\n')))),(0,a.kt)("h2",{id:"nvim-lspconfig"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/neovim/nvim-lspconfig"},"nvim-lspconfig")),(0,a.kt)("p",null," Correctly setup lspconfig for Rust \ud83d\ude80"),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  servers = {\n    -- Ensure mason installs the server\n    rust_analyzer = {},\n    taplo = {},\n  },\n  setup = {\n    rust_analyzer = function(_, opts)\n      require("lazyvim.util").on_attach(function(client, buffer)\n        -- stylua: ignore\n        if client.name == "rust_analyzer" then\n          vim.keymap.set("n", "K", "<cmd>RustHoverActions<cr>", { buffer = buffer, desc = "Hover Actions (Rust)" })\n          vim.keymap.set( "n", "<leader>cR", "<cmd>RustCodeAction<cr>", { buffer = buffer, desc = "Code Action (Rust)" })\n          vim.keymap.set( "n", "<leader>dr", "<cmd>RustDebuggables<cr>", { buffer = buffer, desc = "Run Debuggables (Rust)" })\n        end\n      end)\n      local mason_registry = require("mason-registry")\n      -- rust tools configuration for debugging support\n      local codelldb = mason_registry.get_package("codelldb")\n      local extension_path = codelldb:get_install_path() .. "/extension/"\n      local codelldb_path = extension_path .. "adapter/codelldb"\n      local liblldb_path = vim.fn.has("mac") == 1 and extension_path .. "lldb/lib/liblldb.dylib"\n        or extension_path .. "lldb/lib/liblldb.so"\n      local rust_tools_opts = vim.tbl_deep_extend("force", opts, {\n        dap = {\n          adapter = require("rust-tools.dap").get_codelldb_adapter(codelldb_path, liblldb_path),\n        },\n        tools = {\n          on_initialized = function()\n            vim.cmd([[\n              augroup RustLSP\n                autocmd CursorHold                      *.rs silent! lua vim.lsp.buf.document_highlight()\n                autocmd CursorMoved,InsertEnter         *.rs silent! lua vim.lsp.buf.clear_references()\n                autocmd BufEnter,CursorHold,InsertLeave *.rs silent! lua vim.lsp.codelens.refresh()\n              augroup END\n            ]])\n          end,\n        },\n        server = {\n          settings = {\n            ["rust-analyzer"] = {\n              cargo = {\n                allFeatures = true,\n                loadOutDirsFromCheck = true,\n                runBuildScripts = true,\n              },\n              -- Add clippy lints for Rust.\n              checkOnSave = {\n                allFeatures = true,\n                command = "clippy",\n                extraArgs = { "--no-deps" },\n              },\n              procMacro = {\n                enable = true,\n                ignored = {\n                  ["async-trait"] = { "async_trait" },\n                  ["napi-derive"] = { "napi" },\n                  ["async-recursion"] = { "async_recursion" },\n                },\n              },\n            },\n          },\n        },\n      })\n      require("rust-tools").setup(rust_tools_opts)\n      return true\n    end,\n    taplo = function(_, _)\n      local function show_documentation()\n        if vim.fn.expand("%:t") == "Cargo.toml" and require("crates").popup_available() then\n          require("crates").show_popup()\n        else\n          vim.lsp.buf.hover()\n        end\n      end\n      require("lazyvim.util").on_attach(function(client, buffer)\n        if client.name == "taplo" then\n          vim.keymap.set("n", "K", show_documentation, { buffer = buffer, desc = "Show Crate Documentation" })\n        end\n      end)\n      return false -- make sure the base implementation calls taplo.setup\n    end,\n  },\n}\n'))),(0,a.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "neovim/nvim-lspconfig",\n  dependencies = { "simrat39/rust-tools.nvim" },\n  opts = {\n    servers = {\n      -- Ensure mason installs the server\n      rust_analyzer = {},\n      taplo = {},\n    },\n    setup = {\n      rust_analyzer = function(_, opts)\n        require("lazyvim.util").on_attach(function(client, buffer)\n                -- stylua: ignore\n          if client.name == "rust_analyzer" then\n            vim.keymap.set("n", "K", "<cmd>RustHoverActions<cr>", { buffer = buffer, desc = "Hover Actions (Rust)" })\n            vim.keymap.set( "n", "<leader>cR", "<cmd>RustCodeAction<cr>", { buffer = buffer, desc = "Code Action (Rust)" })\n            vim.keymap.set( "n", "<leader>dr", "<cmd>RustDebuggables<cr>", { buffer = buffer, desc = "Run Debuggables (Rust)" })\n          end\n        end)\n        local mason_registry = require("mason-registry")\n        -- rust tools configuration for debugging support\n        local codelldb = mason_registry.get_package("codelldb")\n        local extension_path = codelldb:get_install_path() .. "/extension/"\n        local codelldb_path = extension_path .. "adapter/codelldb"\n        local liblldb_path = vim.fn.has("mac") == 1 and extension_path .. "lldb/lib/liblldb.dylib"\n          or extension_path .. "lldb/lib/liblldb.so"\n        local rust_tools_opts = vim.tbl_deep_extend("force", opts, {\n          dap = {\n            adapter = require("rust-tools.dap").get_codelldb_adapter(codelldb_path, liblldb_path),\n          },\n          tools = {\n            on_initialized = function()\n              vim.cmd([[\n                augroup RustLSP\n                  autocmd CursorHold                      *.rs silent! lua vim.lsp.buf.document_highlight()\n                  autocmd CursorMoved,InsertEnter         *.rs silent! lua vim.lsp.buf.clear_references()\n                  autocmd BufEnter,CursorHold,InsertLeave *.rs silent! lua vim.lsp.codelens.refresh()\n                augroup END\n              ]])\n            end,\n          },\n          server = {\n            settings = {\n              ["rust-analyzer"] = {\n                cargo = {\n                  allFeatures = true,\n                  loadOutDirsFromCheck = true,\n                  runBuildScripts = true,\n                },\n                -- Add clippy lints for Rust.\n                checkOnSave = {\n                  allFeatures = true,\n                  command = "clippy",\n                  extraArgs = { "--no-deps" },\n                },\n                procMacro = {\n                  enable = true,\n                  ignored = {\n                    ["async-trait"] = { "async_trait" },\n                    ["napi-derive"] = { "napi" },\n                    ["async-recursion"] = { "async_recursion" },\n                  },\n                },\n              },\n            },\n          },\n        })\n        require("rust-tools").setup(rust_tools_opts)\n        return true\n      end,\n      taplo = function(_, _)\n        local function show_documentation()\n          if vim.fn.expand("%:t") == "Cargo.toml" and require("crates").popup_available() then\n            require("crates").show_popup()\n          else\n            vim.lsp.buf.hover()\n          end\n        end\n        require("lazyvim.util").on_attach(function(client, buffer)\n          if client.name == "taplo" then\n            vim.keymap.set("n", "K", show_documentation, { buffer = buffer, desc = "Show Crate Documentation" })\n          end\n        end)\n        return false -- make sure the base implementation calls taplo.setup\n      end,\n    },\n  },\n}\n')))),(0,a.kt)("h2",{id:"rust-toolsnvim"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/simrat39/rust-tools.nvim"},"rust-tools.nvim")),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"opts = nil\n"))),(0,a.kt)(s.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{ "simrat39/rust-tools.nvim" }\n')))))}d.isMDXComponent=!0}}]);