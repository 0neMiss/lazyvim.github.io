"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[8214],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=u(t),d=a,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||i;return t?r.createElement(f,l(l({ref:n},c),{},{components:t})):r.createElement(f,l({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[m]="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>l});var r=t(7294),a=t(6010);const i="tabItem_Ymn6";function l(e){let{children:n,hidden:t,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,l),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>w});var r=t(7462),a=t(7294),i=t(6010),l=t(2466),o=t(6550),s=t(1980),u=t(7392),c=t(12);function m(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}}))}function p(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??m(t);return function(e){const n=(0,u.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function d(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const r=(0,o.k6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s._X)(i),(0,a.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(r.location.search);n.set(i,e),r.replace({...r.location,search:n.toString()})}),[i,r])]}function v(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,i=p(e),[l,o]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!d({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:i}))),[s,u]=f({queryString:t,groupId:r}),[m,v]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,i]=(0,c.Nk)(t);return[r,(0,a.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:r}),b=(()=>{const e=s??m;return d({value:e,tabValues:i})?e:null})();(0,a.useLayoutEffect)((()=>{b&&o(b)}),[b]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!d({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),v(e)}),[u,v,i]),tabValues:i}}var b=t(2389);const y="tabList__CuJ",g="tabItem_LNqP";function h(e){let{className:n,block:t,selectedValue:o,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:m}=(0,l.o5)(),p=e=>{const n=e.currentTarget,t=c.indexOf(n),r=u[t].value;r!==o&&(m(n),s(r))},d=e=>{let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},n)},u.map((e=>{let{value:n,label:t,attributes:l}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,key:n,ref:e=>c.push(e),onKeyDown:d,onClick:p},l,{className:(0,i.Z)("tabs__item",g,l?.className,{"tabs__item--active":o===n})}),t??n)})))}function x(e){let{lazy:n,children:t,selectedValue:r}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},i.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r}))))}function k(e){const n=v(e);return a.createElement("div",{className:(0,i.Z)("tabs-container",y)},a.createElement(h,(0,r.Z)({},e,n)),a.createElement(x,(0,r.Z)({},e,n)))}function w(e){const n=(0,b.Z)();return a.createElement(k,(0,r.Z)({key:String(n)},e))}},9369:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>u,toc:()=>m});var r=t(7462),a=(t(7294),t(3905)),i=t(4866),l=t(5162);const o={},s="nvim-lint",u={unversionedId:"extras/linting/nvim-lint",id:"extras/linting/nvim-lint",title:"nvim-lint",description:"LazyVim adds a condition option for linters that allows you to",source:"@site/docs/extras/linting/nvim-lint.md",sourceDirName:"extras/linting",slug:"/extras/linting/nvim-lint",permalink:"/extras/linting/nvim-lint",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/master/docs/extras/linting/nvim-lint.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Eslint",permalink:"/extras/linting/eslint"},next:{title:"Neotest",permalink:"/extras/test/core"}},c={},m=[{value:"nvim-lint",id:"nvim-lint-1",level:2}],p={toc:m};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"nvim-lint"},(0,a.kt)("inlineCode",{parentName:"h1"},"nvim-lint")),(0,a.kt)("p",null,"LazyVim adds a ",(0,a.kt)("inlineCode",{parentName:"p"},"condition")," option for linters that allows you to\ndynamically enable/disable linters based on the context."),(0,a.kt)("p",null,"To use this, add it to your ",(0,a.kt)("strong",{parentName:"p"},"lazy.nvim")," imports:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="lua/config/lazy.lua" {4}',title:'"lua/config/lazy.lua"',"{4}":!0},'require("lazy").setup({\n  spec = {\n    { "LazyVim/LazyVim", import = "lazyvim.plugins" },\n    { import = "lazyvim.plugins.extras.linting.nvim-lint" },\n    { import = "plugins" },\n  },\n})\n')),(0,a.kt)("h2",{id:"nvim-lint-1"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/mfussenegger/nvim-lint"},"nvim-lint")),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  -- Event to trigger linters\n  events = { "BufWritePost", "BufReadPost", "InsertLeave" },\n  linters_by_ft = {\n    fish = { "fish" },\n  },\n  -- LazyVim extension to easily override linter options\n  -- or add custom linters.\n  ---@type table<string,table>\n  linters = {\n    -- -- Example of using selene only when a selene.toml file is present\n    -- selene = {\n    --   -- `condition` is another LazyVim extension that allows you to\n    --   -- dynamically enable/disable linters based on the context.\n    --   condition = function(ctx)\n    --     return vim.fs.find({ "selene.toml" }, { path = ctx.filename, upward = true })[1]\n    --   end,\n    -- },\n  },\n}\n'))),(0,a.kt)(l.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "mfussenegger/nvim-lint",\n  event = "BufReadPost",\n  opts = {\n    -- Event to trigger linters\n    events = { "BufWritePost", "BufReadPost", "InsertLeave" },\n    linters_by_ft = {\n      fish = { "fish" },\n    },\n    -- LazyVim extension to easily override linter options\n    -- or add custom linters.\n    ---@type table<string,table>\n    linters = {\n      -- -- Example of using selene only when a selene.toml file is present\n      -- selene = {\n      --   -- `condition` is another LazyVim extension that allows you to\n      --   -- dynamically enable/disable linters based on the context.\n      --   condition = function(ctx)\n      --     return vim.fs.find({ "selene.toml" }, { path = ctx.filename, upward = true })[1]\n      --   end,\n      -- },\n    },\n  },\n  config = function(_, opts)\n    local M = {}\n    M._did_setup = false\n\n    function M.setup()\n      if M._did_setup then\n        return\n      end\n      local lint = require("lint")\n      for name, linter in pairs(opts.linters) do\n        lint.linters[name] = vim.tbl_deep_extend("force", lint.linters[name] or {}, linter)\n      end\n      lint.linters_by_ft = vim.tbl_extend("force", lint.linters_by_ft, opts.linters_by_ft)\n      M._did_setup = true\n    end\n\n    function M.debounce(ms, fn)\n      local timer = vim.loop.new_timer()\n      return function(...)\n        local argv = { ... }\n        timer:start(ms, 0, function()\n          timer:stop()\n          vim.schedule_wrap(fn)(unpack(argv))\n        end)\n      end\n    end\n\n    function M.lint()\n      M.setup()\n      local lint = require("lint")\n      local names = lint.linters_by_ft[vim.bo.filetype] or {}\n      local ctx = { filename = vim.api.nvim_buf_get_name(0) }\n      ctx.dirname = vim.fn.fnamemodify(ctx.filename, ":h")\n      names = vim.tbl_filter(function(name)\n        local linter = lint.linters[name]\n        return linter and not (linter.condition and not linter.condition(ctx))\n      end, names)\n\n      if #names > 0 then\n        lint.try_lint(names)\n      end\n    end\n\n    vim.api.nvim_create_autocmd(opts.events, {\n      group = vim.api.nvim_create_augroup("nvim-lint", { clear = true }),\n      callback = M.debounce(100, M.lint),\n    })\n  end,\n}\n')))))}d.isMDXComponent=!0}}]);