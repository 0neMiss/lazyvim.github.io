"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[551],{3905:(e,t,n)=>{n.d(t,{Zo:()=>f,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},f=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,f=o(e,["components","mdxType","originalType","parentName"]),c=s(n),d=i,m=c["".concat(u,".").concat(d)]||c[d]||p[d]||a;return n?r.createElement(m,l(l({ref:t},f),{},{components:n})):r.createElement(m,l({ref:t},f))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=d;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[c]="string"==typeof e?e:i,l[1]=o;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(7294),i=n(6010);const a="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,i.Z)(a,l),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>T});var r=n(7462),i=n(7294),a=n(6010),l=n(2466),o=n(6550),u=n(1980),s=n(7392),f=n(12);function c(e){return function(e){return i.Children.map(e,(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:i}}=e;return{value:t,label:n,attributes:r,default:i}}))}function p(e){const{values:t,children:n}=e;return(0,i.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const r=(0,o.k6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u._X)(a),(0,i.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(r.location.search);t.set(a,e),r.replace({...r.location,search:t.toString()})}),[a,r])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,a=p(e),[l,o]=(0,i.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:a}))),[u,s]=m({queryString:n,groupId:r}),[c,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,a]=(0,f.Nk)(n);return[r,(0,i.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:r}),g=(()=>{const e=u??c;return d({value:e,tabValues:a})?e:null})();(0,i.useLayoutEffect)((()=>{g&&o(g)}),[g]);return{selectedValue:l,selectValue:(0,i.useCallback)((e=>{if(!d({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);o(e),s(e),b(e)}),[s,b,a]),tabValues:a}}var g=n(2389);const y="tabList__CuJ",h="tabItem_LNqP";function v(e){let{className:t,block:n,selectedValue:o,selectValue:u,tabValues:s}=e;const f=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.o5)(),p=e=>{const t=e.currentTarget,n=f.indexOf(t),r=s[n].value;r!==o&&(c(t),u(r))},d=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=f.indexOf(e.currentTarget)+1;t=f[n]??f[0];break}case"ArrowLeft":{const n=f.indexOf(e.currentTarget)-1;t=f[n]??f[f.length-1];break}}t?.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":n},t)},s.map((e=>{let{value:t,label:n,attributes:l}=e;return i.createElement("li",(0,r.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>f.push(e),onKeyDown:d,onClick:p},l,{className:(0,a.Z)("tabs__item",h,l?.className,{"tabs__item--active":o===t})}),n??t)})))}function _(e){let{lazy:t,children:n,selectedValue:r}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===r));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function k(e){const t=b(e);return i.createElement("div",{className:(0,a.Z)("tabs-container",y)},i.createElement(v,(0,r.Z)({},e,t)),i.createElement(_,(0,r.Z)({},e,t)))}function T(e){const t=(0,g.Z)();return i.createElement(k,(0,r.Z)({key:String(t)},e))}},3188:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>f,contentTitle:()=>u,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),i=(n(7294),n(3905)),a=n(4866),l=n(5162);const o={},u="edgy.nvim",s={unversionedId:"plugins/extras/ui.edgy",id:"plugins/extras/ui.edgy",title:"edgy.nvim",description:"To use this, add it to your lazy.nvim imports:",source:"@site/docs/plugins/extras/ui.edgy.md",sourceDirName:"plugins/extras",slug:"/plugins/extras/ui.edgy",permalink:"/plugins/extras/ui.edgy",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/master/docs/plugins/extras/ui.edgy.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Neotest",permalink:"/plugins/extras/test.core"},next:{title:"Mini Animate",permalink:"/plugins/extras/ui.mini-animate"}},f={},c=[{value:"edgy.nvim",id:"edgynvim-1",level:2},{value:"neo-tree.nvim",id:"neo-treenvim",level:2},{value:"bufferline.nvim",id:"bufferlinenvim",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"edgynvim"},"edgy.nvim"),(0,i.kt)("p",null,"To use this, add it to your ",(0,i.kt)("strong",{parentName:"p"},"lazy.nvim")," imports:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="lua/config/lazy.lua" {4}',title:'"lua/config/lazy.lua"',"{4}":!0},'require("lazy").setup({\n  spec = {\n    { "LazyVim/LazyVim", import = "lazyvim.plugins" },\n    { import = "lazyvim.plugins.extras.ui.edgy" },\n    { import = "plugins" },\n  },\n})\n')),(0,i.kt)("h2",{id:"edgynvim-1"},(0,i.kt)("a",{parentName:"h2",href:"https://github.com/folke/edgy.nvim"},"edgy.nvim")),(0,i.kt)("p",null," edgy"),(0,i.kt)(a.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  bottom = {\n    { ft = "toggleterm", size = { height = 0.4 } },\n    {\n      ft = "lazyterm",\n      title = "LazyTerm",\n      size = { height = 0.4 },\n      filter = function(buf)\n        return not vim.b[buf].lazyterm_cmd\n      end,\n    },\n    "Trouble",\n    { ft = "qf", title = "QuickFix" },\n    {\n      ft = "help",\n      size = { height = 20 },\n      -- don\'t open help files in edgy that we\'re editing\n      filter = function(buf)\n        return vim.bo[buf].buftype == "help"\n      end,\n    },\n    { ft = "spectre_panel", size = { height = 0.4 } },\n  },\n  left = {\n    {\n      title = "Neo-Tree",\n      ft = "neo-tree",\n      filter = function(buf)\n        return vim.b[buf].neo_tree_source == "filesystem"\n      end,\n      size = { height = 0.5 },\n    },\n    {\n      title = "Neo-Tree Git",\n      ft = "neo-tree",\n      filter = function(buf)\n        return vim.b[buf].neo_tree_source == "git_status"\n      end,\n      pinned = true,\n      open = "Neotree position=right git_status",\n    },\n    {\n      title = "Neo-Tree Buffers",\n      ft = "neo-tree",\n      filter = function(buf)\n        return vim.b[buf].neo_tree_source == "buffers"\n      end,\n      pinned = true,\n      open = "Neotree position=top buffers",\n    },\n    {\n      ft = "Outline",\n      pinned = true,\n      open = "SymbolsOutline",\n    },\n    "neo-tree",\n  },\n}\n'))),(0,i.kt)(l.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "folke/edgy.nvim",\n  event = "VeryLazy",\n  keys = {\n    -- stylua: ignore\n    { "<leader>ue", function() require("edgy").select() end, desc = "Edgy Select Window" },\n  },\n  opts = {\n    bottom = {\n      { ft = "toggleterm", size = { height = 0.4 } },\n      {\n        ft = "lazyterm",\n        title = "LazyTerm",\n        size = { height = 0.4 },\n        filter = function(buf)\n          return not vim.b[buf].lazyterm_cmd\n        end,\n      },\n      "Trouble",\n      { ft = "qf", title = "QuickFix" },\n      {\n        ft = "help",\n        size = { height = 20 },\n        -- don\'t open help files in edgy that we\'re editing\n        filter = function(buf)\n          return vim.bo[buf].buftype == "help"\n        end,\n      },\n      { ft = "spectre_panel", size = { height = 0.4 } },\n    },\n    left = {\n      {\n        title = "Neo-Tree",\n        ft = "neo-tree",\n        filter = function(buf)\n          return vim.b[buf].neo_tree_source == "filesystem"\n        end,\n        size = { height = 0.5 },\n      },\n      {\n        title = "Neo-Tree Git",\n        ft = "neo-tree",\n        filter = function(buf)\n          return vim.b[buf].neo_tree_source == "git_status"\n        end,\n        pinned = true,\n        open = "Neotree position=right git_status",\n      },\n      {\n        title = "Neo-Tree Buffers",\n        ft = "neo-tree",\n        filter = function(buf)\n          return vim.b[buf].neo_tree_source == "buffers"\n        end,\n        pinned = true,\n        open = "Neotree position=top buffers",\n      },\n      {\n        ft = "Outline",\n        pinned = true,\n        open = "SymbolsOutline",\n      },\n      "neo-tree",\n    },\n  },\n}\n')))),(0,i.kt)("h2",{id:"neo-treenvim"},(0,i.kt)("a",{parentName:"h2",href:"https://github.com/nvim-neo-tree/neo-tree.nvim"},"neo-tree.nvim")),(0,i.kt)("p",null," prevent neo-tree from opening files in edgy windows"),(0,i.kt)(a.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function(_, opts)\n  opts.open_files_do_not_replace_types = opts.open_files_do_not_replace_types\n    or { "terminal", "Trouble", "qf", "Outline" }\n  table.insert(opts.open_files_do_not_replace_types, "edgy")\nend\n'))),(0,i.kt)(l.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "nvim-neo-tree/neo-tree.nvim",\n  optional = true,\n  opts = function(_, opts)\n    opts.open_files_do_not_replace_types = opts.open_files_do_not_replace_types\n      or { "terminal", "Trouble", "qf", "Outline" }\n    table.insert(opts.open_files_do_not_replace_types, "edgy")\n  end,\n}\n')))),(0,i.kt)("h2",{id:"bufferlinenvim"},(0,i.kt)("a",{parentName:"h2",href:"https://github.com/akinsho/bufferline.nvim"},"bufferline.nvim")),(0,i.kt)("p",null," Fix bufferline offsets when edgy is loaded"),(0,i.kt)(a.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function()\n  local Offset = require("bufferline.offset")\n  if not Offset.edgy then\n    local get = Offset.get\n    Offset.get = function()\n      if package.loaded.edgy then\n        local layout = require("edgy.config").layout\n        local ret = { left = "", left_size = 0, right = "", right_size = 0 }\n        for _, pos in ipairs({ "left", "right" }) do\n          local sb = layout[pos]\n          if sb and #sb.wins > 0 then\n            local title = " Sidebar" .. string.rep(" ", sb.bounds.width - 8)\n            ret[pos] = "%#EdgyTitle#" .. title .. "%*" .. "%#WinSeparator#\u2502%*"\n            ret[pos .. "_size"] = sb.bounds.width\n          end\n        end\n        ret.total_size = ret.left_size + ret.right_size\n        if ret.total_size > 0 then\n          return ret\n        end\n      end\n      return get()\n    end\n    Offset.edgy = true\n  end\nend\n'))),(0,i.kt)(l.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "akinsho/bufferline.nvim",\n  optional = true,\n  opts = function()\n    local Offset = require("bufferline.offset")\n    if not Offset.edgy then\n      local get = Offset.get\n      Offset.get = function()\n        if package.loaded.edgy then\n          local layout = require("edgy.config").layout\n          local ret = { left = "", left_size = 0, right = "", right_size = 0 }\n          for _, pos in ipairs({ "left", "right" }) do\n            local sb = layout[pos]\n            if sb and #sb.wins > 0 then\n              local title = " Sidebar" .. string.rep(" ", sb.bounds.width - 8)\n              ret[pos] = "%#EdgyTitle#" .. title .. "%*" .. "%#WinSeparator#\u2502%*"\n              ret[pos .. "_size"] = sb.bounds.width\n            end\n          end\n          ret.total_size = ret.left_size + ret.right_size\n          if ret.total_size > 0 then\n            return ret\n          end\n        end\n        return get()\n      end\n      Offset.edgy = true\n    end\n  end,\n}\n')))))}d.isMDXComponent=!0}}]);