"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[1993],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||l;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:a,i[1]=o;for(var c=2;c<l;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(7294),a=n(6010);const l="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(l,i),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>k});var r=n(7462),a=n(7294),l=n(6010),i=n(2466),o=n(6550),s=n(1980),c=n(7392),u=n(12);function d(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function p(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const r=(0,o.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(l),(0,a.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(r.location.search);t.set(l,e),r.replace({...r.location,search:t.toString()})}),[l,r])]}function v(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,l=p(e),[i,o]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:l}))),[s,c]=f({queryString:n,groupId:r}),[d,v]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,l]=(0,u.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:r}),h=(()=>{const e=s??d;return m({value:e,tabValues:l})?e:null})();(0,a.useLayoutEffect)((()=>{h&&o(h)}),[h]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),c(e),v(e)}),[c,v,l]),tabValues:l}}var h=n(2389);const g="tabList__CuJ",b="tabItem_LNqP";function y(e){let{className:t,block:n,selectedValue:o,selectValue:s,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.o5)(),p=e=>{const t=e.currentTarget,n=u.indexOf(t),r=c[n].value;r!==o&&(d(t),s(r))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:i}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:p},i,{className:(0,l.Z)("tabs__item",b,i?.className,{"tabs__item--active":o===t})}),n??t)})))}function j(e){let{lazy:t,children:n,selectedValue:r}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function _(e){const t=v(e);return a.createElement("div",{className:(0,l.Z)("tabs-container",g)},a.createElement(y,(0,r.Z)({},e,t)),a.createElement(j,(0,r.Z)({},e,t)))}function k(e){const t=(0,h.Z)();return a.createElement(_,(0,r.Z)({key:String(t)},e))}},9482:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var r=n(7462),a=(n(7294),n(3905)),l=n(4866),i=n(5162);const o={},s="lang.java",c={unversionedId:"extras/lang/java",id:"extras/lang/java",title:"lang.java",description:"To use this, add it to your lazy.nvim imports:",source:"@site/docs/extras/lang/java.md",sourceDirName:"extras/lang",slug:"/extras/lang/java",permalink:"/extras/lang/java",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/master/docs/extras/lang/java.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Go",permalink:"/extras/lang/go"},next:{title:"JSON",permalink:"/extras/lang/json"}},u={},d=[{value:"nvim-treesitter",id:"nvim-treesitter",level:2},{value:"nvim-lspconfig",id:"nvim-lspconfig",level:2},{value:"which-key.nvim",id:"which-keynvim",level:2},{value:"nvim-jdtls",id:"nvim-jdtls",level:2}],p={toc:d};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"langjava"},(0,a.kt)("inlineCode",{parentName:"h1"},"lang.java")),(0,a.kt)("p",null,"To use this, add it to your ",(0,a.kt)("strong",{parentName:"p"},"lazy.nvim")," imports:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="lua/config/lazy.lua" {4}',title:'"lua/config/lazy.lua"',"{4}":!0},'require("lazy").setup({\n  spec = {\n    { "LazyVim/LazyVim", import = "lazyvim.plugins" },\n    { import = "lazyvim.plugins.extras.lang.java" },\n    { import = "plugins" },\n  },\n})\n')),(0,a.kt)("h2",{id:"nvim-treesitter"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/nvim-treesitter/nvim-treesitter"},"nvim-treesitter")),(0,a.kt)("p",null," Add java to treesitter."),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function(_, opts)\n  if type(opts.ensure_installed) == "table" then\n    vim.list_extend(opts.ensure_installed, { "java" })\n  end\nend\n'))),(0,a.kt)(i.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "nvim-treesitter/nvim-treesitter",\n  opts = function(_, opts)\n    if type(opts.ensure_installed) == "table" then\n      vim.list_extend(opts.ensure_installed, { "java" })\n    end\n  end,\n}\n')))),(0,a.kt)("h2",{id:"nvim-lspconfig"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/neovim/nvim-lspconfig"},"nvim-lspconfig")),(0,a.kt)("p",null," Set up lsp with mfussenegger/nvim-jdtls instead of nvim-lspconfig."),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  -- make sure mason installs the server\n  servers = {\n    jdtls = {\n      -- stylua: ignore\n      keys = {\n        { "<leader>co", function() require("jdtls").organize_imports() end, desc = "Organize Imports", },\n        { "<leader>cR", function() require("jdtls").rename_file() end, desc = "Rename File", },\n        { "<leader>cxv", function() require("jdtls").extract_variable() end, desc = "Extract Variable", },\n        { "<leader>cxv", function() require("jdtls").extract_variable({ visual = true }) end, mode = "v", desc = "Extract Variable", },\n        { "<leader>cxc", function() require("jdtls").extract_constant() end, desc = "Extract Constant", },\n        { "<leader>cxc", function() require("jdtls").extract_constant({ visual = true }) end, mode = "v", desc = "Extract Constant", },\n        { "<leader>cxm", function() require("jdtls").extract_method({ visual = true }) end, mode = "v", desc = "Extract Method", },\n      },\n    },\n  },\n  setup = {\n    -- Override the default jdtls server startup to use nvim-jdtls.\n    jdtls = function()\n      -- The lspconfig configuration for jdtls contains two useful items:\n      -- 1. The list of filetypes on which to match.\n      -- 2. Custom method for finding the root for a java project.\n      local lsp_config = require("lspconfig.server_configurations.jdtls").default_config\n      local find_java_project_root = lsp_config.root_dir\n      local filetypes = lsp_config.filetypes\n\n      -- Attach jdtls for the proper filetypes (i.e. java).\n      -- Existing server will be reused if the root_dir matches.\n      vim.api.nvim_create_autocmd("FileType", {\n        group = vim.api.nvim_create_augroup("MyJdtls", { clear = true }),\n        pattern = filetypes,\n        callback = function()\n          local fname = vim.api.nvim_buf_get_name(0)\n          local root_dir = find_java_project_root(fname)\n          local project_name = root_dir and vim.fs.basename(root_dir)\n          local cmd = { "jdtls" }\n          if project_name then\n            local jdtls_cache_dir = vim.fs.joinpath(vim.fn.stdpath("cache"), "jdtls", project_name)\n            vim.list_extend(cmd, {\n              "-configuration",\n              vim.fs.joinpath(jdtls_cache_dir, "config"),\n              "-data",\n              vim.fs.joinpath(jdtls_cache_dir, "workspace"),\n            })\n          end\n          require("jdtls").start_or_attach({\n            cmd = cmd,\n            root_dir = root_dir,\n          })\n          require("which-key").register({ c = { x = { name = "Extract" } } }, { prefix = "<leader>" })\n        end,\n      })\n\n      return true -- avoid duplicate servers\n    end,\n  },\n}\n'))),(0,a.kt)(i.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "neovim/nvim-lspconfig",\n  dependencies = { "folke/which-key.nvim", "mfussenegger/nvim-jdtls" },\n  opts = {\n    -- make sure mason installs the server\n    servers = {\n      jdtls = {\n        -- stylua: ignore\n        keys = {\n          { "<leader>co", function() require("jdtls").organize_imports() end, desc = "Organize Imports", },\n          { "<leader>cR", function() require("jdtls").rename_file() end, desc = "Rename File", },\n          { "<leader>cxv", function() require("jdtls").extract_variable() end, desc = "Extract Variable", },\n          { "<leader>cxv", function() require("jdtls").extract_variable({ visual = true }) end, mode = "v", desc = "Extract Variable", },\n          { "<leader>cxc", function() require("jdtls").extract_constant() end, desc = "Extract Constant", },\n          { "<leader>cxc", function() require("jdtls").extract_constant({ visual = true }) end, mode = "v", desc = "Extract Constant", },\n          { "<leader>cxm", function() require("jdtls").extract_method({ visual = true }) end, mode = "v", desc = "Extract Method", },\n        },\n      },\n    },\n    setup = {\n      -- Override the default jdtls server startup to use nvim-jdtls.\n      jdtls = function()\n        -- The lspconfig configuration for jdtls contains two useful items:\n        -- 1. The list of filetypes on which to match.\n        -- 2. Custom method for finding the root for a java project.\n        local lsp_config = require("lspconfig.server_configurations.jdtls").default_config\n        local find_java_project_root = lsp_config.root_dir\n        local filetypes = lsp_config.filetypes\n\n        -- Attach jdtls for the proper filetypes (i.e. java).\n        -- Existing server will be reused if the root_dir matches.\n        vim.api.nvim_create_autocmd("FileType", {\n          group = vim.api.nvim_create_augroup("MyJdtls", { clear = true }),\n          pattern = filetypes,\n          callback = function()\n            local fname = vim.api.nvim_buf_get_name(0)\n            local root_dir = find_java_project_root(fname)\n            local project_name = root_dir and vim.fs.basename(root_dir)\n            local cmd = { "jdtls" }\n            if project_name then\n              local jdtls_cache_dir = vim.fs.joinpath(vim.fn.stdpath("cache"), "jdtls", project_name)\n              vim.list_extend(cmd, {\n                "-configuration",\n                vim.fs.joinpath(jdtls_cache_dir, "config"),\n                "-data",\n                vim.fs.joinpath(jdtls_cache_dir, "workspace"),\n              })\n            end\n            require("jdtls").start_or_attach({\n              cmd = cmd,\n              root_dir = root_dir,\n            })\n            require("which-key").register({ c = { x = { name = "Extract" } } }, { prefix = "<leader>" })\n          end,\n        })\n\n        return true -- avoid duplicate servers\n      end,\n    },\n  },\n}\n')))),(0,a.kt)("h2",{id:"which-keynvim"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/folke/which-key.nvim"},"which-key.nvim")),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"opts = nil\n"))),(0,a.kt)(i.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'{ "folke/which-key.nvim", "mfussenegger/nvim-jdtls" }\n')))),(0,a.kt)("h2",{id:"nvim-jdtls"},(0,a.kt)("a",{parentName:"h2",href:"https://github.com/mfussenegger/nvim-jdtls"},"nvim-jdtls")),(0,a.kt)(l.Z,{mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"opts = nil\n"))),(0,a.kt)(i.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'"mfussenegger/nvim-jdtls"\n')))))}m.isMDXComponent=!0}}]);